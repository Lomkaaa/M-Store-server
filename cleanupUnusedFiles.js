const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const cleanupUnusedFiles = async () => {
  try {
    console.log('‚è≥ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    const productImages = await prisma.product.findMany({
      select: {
        imageUrl: true,
        otherImages: true,
      },
    });

    const allImages = [
      ...productImages.map(p => p.imageUrl),
      ...productImages.flatMap(p => p.otherImages),
    ];

    const productFolder = path.resolve(__dirname, "./uploads/products")

    if (!fs.existsSync(productFolder)) {
      console.log('–ü–∞–ø–∫–∞ products –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
      return;
    }

    fs.readdirSync(productFolder).forEach((file) => {
      const filePath = path.join(productFolder, file);

      if (!allImages.includes(`/uploads/products/${file}`)) {
        console.log(`üóë –£–¥–∞–ª—è–µ–º: ${file}`);
        fs.unlinkSync(filePath);
      }
    });


  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00
cron.schedule('0 3 * * *', cleanupUnusedFiles);
module.exports = cleanupUnusedFiles